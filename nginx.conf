
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      ;


    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;


    server {
        listen       80;
        server_name  revproxy-service;

        listen 443 ssl;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        set $access_token "";
        set $csrf_check "ok-tokenauth";
        if ($cookie_access_token) {
                set $access_token "bearer $cookie_access_token";
                # cookie auth requires csrf check
                set $csrf_check "fail";
        }
        if ($http_authorization) {
                # Authorization header is present - prefer that token over cookie token
                set $access_token "$http_authorization";
        }

        proxy_set_header   Authorization "$access_token";
        # proxy_set_header   X-Forwarded-For "$realip";
        # proxy_set_header   X-UserId "$userid";

        #
        # Accomodate large jwt token headers
        # * http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffer_size
        # * https://ma.ttias.be/nginx-proxy-upstream-sent-big-header-reading-response-header-upstream/
        #
        proxy_buffer_size          16k;
        proxy_buffers              8 16k;
        proxy_busy_buffers_size    32k;
        #
        # also incoming from client:
        # * https://fullvalence.com/2016/07/05/cookie-size-in-nginx/
        # * https://nginx.org/en/docs/http/ngx_http_core_module.html#client_header_buffer_size
        large_client_header_buffers 4 32k;
        client_header_buffer_size 32k;

        #
        # CSRF check
        # This block requires a csrftoken for all POST requests.
        #
        if ($cookie_csrftoken = $http_x_csrf_token) {
          # this will fail further below if cookie_csrftoken is empty
          set $csrf_check "ok-$cookie_csrftoken";
        }
        if ($request_method != "POST") {
          set $csrf_check "ok-$request_method";
        }
        if ($cookie_access_token = "") {
          # do this again here b/c empty cookie_csrftoken == empty http_x_csrf_token - ugh
          set $csrf_check "ok-tokenauth";
        }

        location / {
                proxy_pass http://portal-service/;
        }

        location /user/ {
                proxy_pass http://fence-service/;
        }

        location /api/ {
                proxy_pass http://sheepdog-service/;
        }

        location /coremetadata/ {
            # redirect to coremetadata landing page if header does not specify otherwise
            if ($http_accept !~ (application/json|x-bibtex|application/vnd\.schemaorg\.ld\+json)) {
              rewrite ^/coremetadata/(.*) /files/$1 redirect;
            }

            rewrite ^/coremetadata/(.*) /$1 break;
            proxy_pass http://pidgin-service;
        }

        location /index/ {
                proxy_pass http://indexd-service/;
        }
        location /peregrine/_status {
            proxy_pass http://peregrine-service/_status;
        }
        location /pidgin/_status {
            proxy_pass http://pidgin-service/_status;
        }

        location /api/v0/submission/getschema {
                proxy_pass http://peregrine-service/v0/submission/getschema;
        }

        location /api/v0/submission/graphql {
                if ($cookie_csrftoken = "") {
                        add_header Set-Cookie "csrftoken=$request_id$request_length$request_time$time_iso8601;Path=/";
                }
                proxy_next_upstream off;
                # Forward the host and set Subdir header so api
                # knows the original request path for hmac signing
                proxy_set_header   Host $host;
                proxy_set_header   Subdir /api;
                proxy_set_header   Authorization "$access_token";
                proxy_connect_timeout 300;
                proxy_send_timeout 300;
                proxy_read_timeout 300;
                send_timeout 300;
                proxy_pass http://peregrine-service/v0/submission/graphql;
        }

        location /api/search {
            if ($csrf_check !~ ^ok-\S.+$) {
              return 403 "failed csrf check";
            }

            gzip off;
            proxy_next_upstream off;
            proxy_set_header   Host $host;
            proxy_set_header   Authorization "$access_token";

            proxy_connect_timeout 300;
            proxy_send_timeout 300;
            proxy_read_timeout 300;
            send_timeout 300;

            rewrite ^/api/search/(.*) /$1 break;
            proxy_pass http://peregrine-service;
        }


        # see https://github.com/uc-cdis/cloud-automation/blob/64c912e03fc358516167d7f3831d40a815c646fa/kube/services/revproxy/gen3.nginx.conf/arranger-service.conf
        # location /api/v0/flat-search/ {
        #    rewrite ^/api/v0/flat-search/(.*) /$1 break;
        #    proxy_pass http://arranger-service:5050/;
        # }

        location /kibana {
            # proxy_hide_header ensures the header will not be passed back to the client,
            # proxy_ignore_headers ensures that the header will not automatically disable caching within ngin
            proxy_hide_header       Set-Cookie;
            proxy_ignore_headers    Set-Cookie;

            # ignore all headers from client
            proxy_pass_request_headers off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            rewrite /kibana/(.*) /$1 break;
            proxy_set_header Authorization "$access_token";
            # increment this when kibana version changes
            proxy_set_header kbn-version "6.7.1";
            proxy_set_header content-type "application/json" ;
            proxy_pass http://kibana-service:5601/;

        }

        location /elastic {
            rewrite /elastic/(.*) /$1 break;
            # proxy_pass http://jwtproxy-service:5000/;
            # proxy_set_header Host $host;
            # proxy_set_header X-Real-IP $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # proxy_set_header Forward-To https://esproxy-service:9200/;

            proxy_set_header   Authorization "$access_token";
            proxy_pass https://esproxy-service:9200/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        }

        # https://github.com/uc-cdis/cloud-automation/blob/4241f40c6e10fd7096085a9456217b7b5e7cbb24/kube/services/revproxy/gen3.nginx.conf/fence-service.conf#L5
        location /lw-workspace {
          rewrite /lw-workspace/(.*) /$1 break;

          proxy_set_header   Authorization "$access_token";
          proxy_pass http://kibana-service:5601/;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          # proxy_http_version 1.1;
          # proxy_set_header Upgrade $http_upgrade;
          # proxy_set_header Connection 'upgrade';
          # proxy_set_header Host $host;
          # proxy_cache_bypass $http_upgrade;

          # proxy_pass http://jwtproxy-service:5000/;
          # proxy_set_header Host $host;
          # proxy_set_header X-Real-IP $remote_addr;
          # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          # proxy_set_header Forward_To https://esproxy-service:9200/;
        }


        location /guppy/ {
                proxy_pass http://guppy-service/;
        }

        location /jupyter/ {
          #
          # jupyter notebooks use websockets
          # See https://aptro.github.io/server/architecture/2016/06/21/Jupyter-Notebook-Nginx-Setup.html
          #
          proxy_pass http://jupyter-service:8888/jupyter/;
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          #proxy_set_header X-Real-IP $remote_addr;
          #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection $http_connection;
          #client_max_body_size 0;
        }

    }
}
